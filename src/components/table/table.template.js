import {toInlineStyles} from '../../core/utils';import {defaultStyles} from '../../constants';import {parse} from '../../core/parse';const CODES = {    A: 65,    Z: 90}export const columnsCount = CODES.Z - CODES.A + 1;const DEFAULT_WIDTH = 100;const DEFAULT_HEIGHT = 24;function getWidth(state, index){    return (state[index] || DEFAULT_WIDTH) + 'px';}function getHeight(state, index){    return (state[index] || DEFAULT_HEIGHT) + 'px';}function toCell(state, row){    return function (_, col){        const width = getWidth(state.colState, col);        const id = `${row}:${col}`;        const data = state.dataState[id];        const styles = toInlineStyles({            ...defaultStyles,            ...state.stylesState[id]        });        return `            <div                class="cell"                contenteditable                data-col="${col}"                data-type="cell"                data-id="${id}"                data-value="${data || ''}"                style="${styles}; width: ${width}"             >${parse(data) || ''}</div>        `    }}function toColumn({col, index, width}){    return `        <div             class="column"             data-type="resizable"             data-col="${index}"             style="width: ${width}"         >${col}            <div class="col-resize" data-resize="col" ></div>        </div>    `}function createRow(content, index, state){    const height = getHeight(state, index);    const resize = index        ? `<div class="row-resize" data-resize="row"></div>`        : '';    return `        <div         class="row"         data-type="resizable"         data-row="${index}"         style="height: ${height}">            <div class="row-info">${index ? index : ''}${resize}</div>            <div class="row-data">${content}</div>        </div>    `}function toChar(_, index){    return String.fromCharCode(CODES.A + index);}function withWidthFrom(state){    return function (col, index){        return {            col, index, width: getWidth(state.colState, index)        }    }}export function createTable(rowsCount = 15, state = {}){    // const columnsCount = CODES.Z - CODES.A + 1;    const rows = [];    const columns = new Array(columnsCount)        .fill('')        .map(toChar)        .map(withWidthFrom(state))        .map(toColumn)        .join('');    rows.push(createRow(columns, null, {}));    for (let row = 0; row < rowsCount; row++) {        const cells = new Array(columnsCount)            .fill('')            .map(toCell(state, row))            .join('');        rows.push(createRow(cells, row + 1, state.rowState));    }    return rows.join('')}
import {$} from '../../core/dom';// my implementationexport function resizeHandler($root, event) {    return new Promise(resolve => {        const $resizer = $ (event.target);        const $parent = $resizer.closest ('[data-type="resizable"]');        const coords = $parent.getCoords ();        const type = $resizer.data.resize;        const height = $root.$el.offsetHeight;        const width = $root.$el.offsetWidth;        let value;        $resizer.css ({            opacity: 1,        });        document.onmousemove = e => {            if (type === 'col') {                const delta = e.clientX - coords.right;                value = coords.width + delta;                $resizer.css ({                    right: -delta + 'px',                    bottom: -height + 'px',                    width: '2px',                });            } else {                const delta = e.clientY - coords.bottom;                value = coords.height + delta;                $resizer.css ({                    bottom: -delta + 'px',                    right: -width + 'px',                    height: '2px',                });            }        }        document.onmouseup = () => {            document.onmousemove = null;            document.onmouseup = null;            if (type === 'col') {                $parent.css ({width: value + 'px'});                // noinspection JSUnresolvedVariable                $root                    .findAll (`[data-col="${$parent.data.col}"]`)                    .forEach (el => {                        el.style.width = value + 'px';                    })                $resizer.css ({                    opacity: 0,                    bottom: 0,                    right: '-2px',                    width: '4px'                })            } else {                $parent.css ({height: value + 'px'});                $resizer.css ({                    opacity: 0,                    right: 0,                    bottom: '-2px',                    height: '4px'                })            }            resolve({                value,                type,                id: $parent.data[type],            })        }    })}